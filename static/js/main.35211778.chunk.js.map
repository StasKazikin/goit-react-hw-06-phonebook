{"version":3,"sources":["components/ContactList/ContactList.module.scss","components/Filter/Filter.module.scss","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.scss"],"names":["module","exports","actions","addContact","createAction","deleteContact","changeFilter","ContactForm","state","name","number","nameInputId","shortid","generate","numberInputId","handleInput","event","currentTarget","value","setState","reset","sameContact","contactName","contacts","find","toLowerCase","handleSubmit","preventDefault","props","items","alert","onSubmit","id","this","className","form","label","htmlFor","input","type","onChange","button","Component","connect","dispatch","newContact","filter","target","filterContacts","normalizedFilter","includes","list","map","item","onClick","App","createReducer","INITIAL_STATE","payload","_","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35211778.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__23wHE\",\"item\":\"ContactList_item__3lSHc\",\"button\":\"ContactList_button__33eBz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1q2re\",\"input\":\"Filter_input__3fv1c\"};","// import types from \"./contacts-types\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\n// const addContact = (newContact) => ({\r\n//   type: types.ADD_CONTACT,\r\n//   payload: newContact,\r\n// });\r\n\r\nconst addContact = createAction(\"contacts/addContact\");\r\n\r\n// const deleteContact = (contactId) => ({\r\n//   type: types.DELETE_CONTACT,\r\n//   payload: contactId,\r\n// });\r\n\r\nconst deleteContact = createAction(\"contacts/deleteContact\");\r\n\r\n// const changeFilter = (value) => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\nconst changeFilter = createAction(\"contacts/changeFilter\");\r\n\r\nconst actions = { addContact, deleteContact, changeFilter };\r\n\r\nexport default actions;\r\n","import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport shortid from \"shortid\";\r\nimport { form, label, input, button } from \"./ContactForm.module.scss\";\r\nimport actions from \"../../redux/contacts/contacts-actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n\r\n  handleInput = (event) => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  sameContact = (contactName, contacts) => {\r\n    return contacts.find(({ name }) => {\r\n      return name.toLowerCase() === contactName.toLowerCase();\r\n    });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n\r\n    const { contacts } = this.props;\r\n\r\n    if (this.sameContact(name, contacts.items)) {\r\n      alert(`${name} is already in contacts`);\r\n      return;\r\n    }\r\n    this.props.onSubmit({ id: shortid.generate(), name, number });\r\n\r\n    this.reset();\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form className={form} onSubmit={this.handleSubmit}>\r\n        <label className={label} htmlFor={this.nameInputId}>\r\n          Name\r\n          <input\r\n            className={input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={this.handleInput}\r\n            id={this.nameInputId}\r\n          ></input>\r\n        </label>\r\n        <label className={label} htmlFor={this.numberInputId}>\r\n          Number\r\n          <input\r\n            className={input}\r\n            type=\"text\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={this.handleInput}\r\n            id={this.numberInputId}\r\n          ></input>\r\n        </label>\r\n        <button className={button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    contacts: state.contacts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (newContact) => dispatch(actions.addContact(newContact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import PropTypes from \"prop-types\";\r\nimport { label, input } from \"./Filter.module.scss\";\r\nimport actions from \"../../redux/contacts/contacts-actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <label className={label}>\r\n      Find contacts by name\r\n      <input\r\n        className={input}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={value}\r\n        onChange={onChange}\r\n      ></input>\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (event) => dispatch(actions.changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import PropTypes from \"prop-types\";\r\nimport { list, item, button } from \"./ContactList.module.scss\";\r\nimport actions from \"../../redux/contacts/contacts-actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst ContactList = ({ contacts, deleteContact }) => {\r\n  return (\r\n    <ul className={list}>\r\n      {contacts.map(({ name, number, id }) => (\r\n        <li className={item} key={id}>\r\n          <span>\r\n            {name}: {number}\r\n          </span>\r\n          <button\r\n            className={button}\r\n            id={id}\r\n            type=\"button\"\r\n            onClick={() => deleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nconst filterContacts = (contacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contacts: filterContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  deleteContact: (id) => dispatch(actions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\";\nimport ContactList from \"./components/ContactList\";\n\nconst App = () => {\n  // componentDidMount() {\n  //   // const contacts = localStorage.getItem(\"contacts\");\n  //   const parsedContacts = JSON.parse(localStorage.getItem(\"contacts\"));\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\nimport INITIAL_STATE from \"../../initial_state.json\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"./contacts-actions\";\r\n// import types from \"./contacts-types\";\r\n\r\nconst items = createReducer([...INITIAL_STATE], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\n// const items = (state = [...INITIAL_STATE], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD_CONTACT:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE_CONTACT:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({ items, filter });\r\n","// import { createStore } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n// import { combineReducers } from \"redux\";\r\n\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: contactsReducer },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__euFFc\",\"label\":\"ContactForm_label__2H-Br\",\"input\":\"ContactForm_input__F1d1W\",\"button\":\"ContactForm_button__2HEgS\"};"],"sourceRoot":""}